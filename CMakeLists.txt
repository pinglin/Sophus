SET(PROJECT_NAME Sophus)

PROJECT(${PROJECT_NAME})
CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

SET(CMAKE_VERBOSE_MAKEFILE ON)

IF(NOT CMAKE_BUILD_TYPE)
   SET(CMAKE_BUILD_TYPE Release)
ENDIF()

IF(CMAKE_COMPILER_IS_GNUCXX)
   SET(CMAKE_CXX_FLAGS_DEBUG  "-O0 -g")
   SET(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG ")

  ADD_DEFINITIONS("-Wall -Werror -Wno-unused-variable
                   -Wno-unused-but-set-variable -Wno-unknown-pragmas ")
ENDIF()


SET(INCLUDE_DIRS "../Eigen")

SET(SOURCE_DIR "sophus")
SET(CLASSES so2
            se2
            se3
            so3
            scso3
            sim3)

SET(SOURCES ${SOURCE_DIR}/define.h)
SET(INSTALL_HEADERS ${SOURCE_DIR}/define.h)
FOREACH(class ${CLASSES})
   LIST(APPEND SOURCES ${SOURCE_DIR}/${class}.cpp ${SOURCE_DIR}/${class}.h)
   LIST(APPEND INSTALL_HEADERS ${SOURCE_DIR}/${class}.h) 
ENDFOREACH(class)

IF(MSVC)
   ADD_DEFINITIONS(-D_MSVC_)
ENDIF(MSVC)

SET(LIBRARY_NAME ${PROJECT_NAME})

SET(CMAKE_DEBUG_POSTFIX "d")
INCLUDE_DIRECTORIES(${INCLUDE_DIRS})
ADD_LIBRARY(${LIBRARY_NAME} SHARED ${SOURCES})

ADD_EXECUTABLE(test_so2 sophus/test_so2.cpp)
TARGET_LINK_LIBRARIES(test_so2 ${LIBRARY_NAME})
ADD_EXECUTABLE(test_se2 sophus/test_se2.cpp)
TARGET_LINK_LIBRARIES(test_se2 ${LIBRARY_NAME})
ADD_EXECUTABLE(test_so3 sophus/test_so3.cpp)
TARGET_LINK_LIBRARIES(test_so3 ${LIBRARY_NAME})
ADD_EXECUTABLE(test_scso3 sophus/test_scso3.cpp)
TARGET_LINK_LIBRARIES(test_scso3 ${LIBRARY_NAME})
ADD_EXECUTABLE(test_se3 sophus/test_se3.cpp)
TARGET_LINK_LIBRARIES(test_se3 ${LIBRARY_NAME})
ADD_EXECUTABLE(test_sim3 sophus/test_sim3.cpp)
TARGET_LINK_LIBRARIES(test_sim3 ${LIBRARY_NAME})
ENABLE_TESTING()

ADD_TEST(test_so2 test_so2)
ADD_TEST(test_se2 test_se2)
ADD_TEST(test_so3 test_so3)
ADD_TEST(test_scso3 test_scso3)
ADD_TEST(test_se3 test_se3)
ADD_TEST(test_sim3 test_sim3)

# install headers
INSTALL(FILES ${INSTALL_HEADERS} 
  DESTINATION ${PROJECT_SOURCE_DIR}/include/${PROJECT_NAME})

# install library when Debug mode
INSTALL(TARGETS ${LIBRARY_NAME}
  RUNTIME DESTINATION ${PROJECT_SOURCE_DIR}/lib/Debug CONFIGURATIONS Debug
  LIBRARY DESTINATION ${PROJECT_SOURCE_DIR}/lib/Debug CONFIGURATIONS Debug
  ARCHIVE DESTINATION ${PROJECT_SOURCE_DIR}/lib/Debug CONFIGURATIONS Debug
)

# install library when Release mode
INSTALL(TARGETS ${LIBRARY_NAME}
  RUNTIME DESTINATION ${PROJECT_SOURCE_DIR}/lib/Release CONFIGURATIONS Release
  LIBRARY DESTINATION ${PROJECT_SOURCE_DIR}/lib/Release CONFIGURATIONS Release
  ARCHIVE DESTINATION ${PROJECT_SOURCE_DIR}/lib/Release CONFIGURATIONS Release
)
